1. Token Distribution
Total Supply: 1,000,000 ICON tokens

Distribution Breakdown:

Founders and Team: 20% (200,000 ICON)
Community and Ecosystem: 30% (300,000 ICON)
Treasury and Reserves: 24% (240,000 ICON)
Staking and Rewards: 15% (150,000 ICON)
Public Sale: 10% (100,000 ICON)
Creator Initial Funding: 1% (10,000 ICON)
Vesting Schedule:

Founders and Team: 4-year vesting with a 1-year cliff
Community and Ecosystem: 2-year vesting with a 6-month cliff
Treasury and Reserves: No vesting, but controlled by DAO governance
Staking and Rewards: Released over 3 years
Public Sale: No vesting
Creator Initial Funding: No vesting, provided upfront for startup funding and development reimbursement
2. Funding Mechanism for the Creator
Initial Funding:

Seed Funding: The creator receives 1% of the total supply (10,000 ICON) upfront for startup funding and development reimbursement.
Ongoing Funding:

Development Grants: The creator can submit proposals to the DAO for additional funding as needed. These proposals will be subject to community voting.
Performance-Based Rewards: The creator can be rewarded based on the performance and milestones achieved. This can be done through periodic proposals and community votes.



Funding Mechanism for the Creator
Initial Funding Proposal:

The creator can submit a proposal to the DAO to allocate a portion of the Treasury and Reserves to themselves for development and operational costs.
Example Proposal:
function proposeInitialFunding(address creator, uint256 amount) external onlyRole(ADMIN_ROLE) {
    address[] memory targets = new address[](1);
    targets[0] = creator;
    
    uint256[] memory values = new uint256[](1);
    values[0] = amount;
    
    bytes[] memory calldatas = new bytes[](1);
    calldatas[0] = "";

    string memory description = "Initial funding for the creator";
    
    propose(targets, values, calldatas, description);
}
Ongoing Funding Proposals:

The creator can submit periodic proposals to the DAO for additional funding as needed.
Example Proposal:
function proposeAdditionalFunding(address creator, uint256 amount) external onlyRole(ADMIN_ROLE) {
    address[] memory targets = new address[](1);
    targets[0] = creator;
    
    uint256[] memory values = new uint256[](1);
    values[0] = amount;
    
    bytes[] memory calldatas = new bytes[](1);
    calldatas[0] = "";

    string memory description = "Additional funding for the creator";
    
    propose(targets, values, calldatas, description);
}
Performance-Based Rewards:

The creator can be rewarded based on the performance and milestones achieved. This can be done through periodic proposals and community votes.
Example Proposal:
function proposePerformanceReward(address creator, uint256 amount, string memory milestone) external onlyRole(ADMIN_ROLE) {
    address[] memory targets = new address[](1);
    targets[0] = creator;
    
    uint256[] memory values = new uint256[](1);
    values[0] = amount;
    
    bytes[] memory calldatas = new bytes[](1);
    calldatas[0] = "";

    string memory description = string(abi.encodePacked("Performance reward for achieving milestone: ", milestone));
    
    propose(targets, values, calldatas, description);
}
